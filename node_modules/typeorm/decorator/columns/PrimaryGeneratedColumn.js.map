{"version":3,"sources":["../../src/decorator/columns/PrimaryGeneratedColumn.ts"],"names":[],"mappings":";;AAAA,qCAAmD;AA0BnD;;;;;GAKG;AACH,gCAAuC,iBAA6G,EAC7G,YAAqF;IACxH,IAAM,OAAO,GAAkB,EAAE,CAAC;IAElC,EAAE,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC;QACpB,EAAE,CAAC,CAAC,OAAO,iBAAiB,KAAK,QAAQ,CAAC;YACtC,OAAO,CAAC,kBAAkB,GAAG,iBAAuC,CAAC;QAEzE,EAAE,CAAC,CAAC,iBAAiB,YAAY,MAAM,CAAC;YACpC,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,iBAAiB,CAAC,CAAC;IAClD,CAAC;IAAC,IAAI,CAAC,CAAC;QACJ,OAAO,CAAC,kBAAkB,GAAG,WAAW,CAAC;IAC7C,CAAC;IAED,EAAE,CAAC,CAAC,YAAY,YAAY,MAAM,CAAC;QAC/B,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;IAEzC,MAAM,CAAC,UAAU,MAAc,EAAE,YAAoB;QAEjD,2GAA2G;QAC3G,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;YAChB,EAAE,CAAC,CAAC,OAAO,CAAC,kBAAkB,KAAK,WAAW,CAAC,CAAC,CAAC;gBAC7C,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,MAAM,EAAmB,CAAC,CAAC;YAC9D,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,IAAI,EAAE,MAAM,EAAmB,CAAC,CAAC;YAC9D,CAAC;QACL,CAAC;QAED,2DAA2D;QAC3D,MAAM,CAAC,MAAM,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAmB,CAAC,CAAC;QAE5E,4CAA4C;QAC5C,IAAM,IAAI,GAAuB;YAC7B,MAAM,EAAE,MAAM,CAAC,WAAW;YAC1B,YAAY,EAAE,YAAY;YAC1B,IAAI,EAAE,SAAS;YACf,OAAO,EAAE,OAAO;SACnB,CAAC;QACF,8BAAsB,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChD,CAAC,CAAC;AACN,CAAC;AAxCD,wDAwCC","file":"PrimaryGeneratedColumn.js","sourcesContent":["import {getMetadataArgsStorage} from \"../../index\";\nimport {ColumnMetadataArgs} from \"../../metadata-args/ColumnMetadataArgs\";\nimport {PrimaryGeneratedColumnNumericOptions} from \"../options/PrimaryGeneratedColumnNumericOptions\";\nimport {ColumnOptions} from \"../options/ColumnOptions\";\nimport {PrimaryGeneratedColumnUUIDOptions} from \"../options/PrimaryGeneratedColumnUUIDOptions\";\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(options: PrimaryGeneratedColumnNumericOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(strategy: \"increment\", options?: PrimaryGeneratedColumnNumericOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n */\nexport function PrimaryGeneratedColumn(strategy: \"uuid\", options?: PrimaryGeneratedColumnUUIDOptions): Function;\n\n/**\n * Column decorator is used to mark a specific class property as a table column.\n * Only properties decorated with this decorator will be persisted to the database when entity be saved.\n * This column creates an integer PRIMARY COLUMN with generated set to true.\n * This column creates is an alias for @PrimaryColumn(\"int\", { generated: true }).\n */\nexport function PrimaryGeneratedColumn(strategyOrOptions?: \"increment\"|\"uuid\"|PrimaryGeneratedColumnNumericOptions|PrimaryGeneratedColumnUUIDOptions,\n                                       maybeOptions?: PrimaryGeneratedColumnNumericOptions|PrimaryGeneratedColumnUUIDOptions): Function {\n    const options: ColumnOptions = {};\n\n    if (strategyOrOptions) {\n        if (typeof strategyOrOptions === \"string\")\n            options.generationStrategy = strategyOrOptions as \"increment\"|\"uuid\";\n\n        if (strategyOrOptions instanceof Object)\n            Object.assign(options, strategyOrOptions);\n    } else {\n        options.generationStrategy = \"increment\";\n    }\n\n    if (maybeOptions instanceof Object)\n        Object.assign(options, maybeOptions);\n\n    return function (object: Object, propertyName: string) {\n\n        // check if there is no type in column options then set the int type - by default for auto generated column\n        if (!options.type) {\n            if (options.generationStrategy === \"increment\") {\n                Object.assign(options, { type: Number}  as ColumnOptions);\n            } else {\n                Object.assign(options, { type: \"uuid\"}  as ColumnOptions);\n            }\n        }\n\n        // implicitly set a primary and generated to column options\n        Object.assign(options, { primary: true, generated: true } as ColumnOptions);\n\n        // create and register a new column metadata\n        const args: ColumnMetadataArgs = {\n            target: object.constructor,\n            propertyName: propertyName,\n            mode: \"regular\",\n            options: options\n        };\n        getMetadataArgsStorage().columns.push(args);\n    };\n}\n\n"],"sourceRoot":"../.."}