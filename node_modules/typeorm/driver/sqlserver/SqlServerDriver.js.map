{"version":3,"sources":["../../src/driver/sqlserver/SqlServerDriver.ts"],"names":[],"mappings":"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","file":"SqlServerDriver.js","sourcesContent":["import {Driver} from \"../Driver\";\nimport {ConnectionIsNotSetError} from \"../../error/ConnectionIsNotSetError\";\nimport {DriverPackageNotInstalledError} from \"../../error/DriverPackageNotInstalledError\";\nimport {DriverUtils} from \"../DriverUtils\";\nimport {SqlServerQueryRunner} from \"./SqlServerQueryRunner\";\nimport {ObjectLiteral} from \"../../common/ObjectLiteral\";\nimport {ColumnMetadata} from \"../../metadata/ColumnMetadata\";\nimport {DriverOptionNotSetError} from \"../../error/DriverOptionNotSetError\";\nimport {DateUtils} from \"../../util/DateUtils\";\nimport {PlatformTools} from \"../../platform/PlatformTools\";\nimport {Connection} from \"../../connection/Connection\";\nimport {RdbmsSchemaBuilder} from \"../../schema-builder/RdbmsSchemaBuilder\";\nimport {SqlServerConnectionOptions} from \"./SqlServerConnectionOptions\";\nimport {MappedColumnTypes} from \"../types/MappedColumnTypes\";\nimport {ColumnType} from \"../types/ColumnTypes\";\nimport {DataTypeDefaults} from \"../types/DataTypeDefaults\";\nimport {MssqlParameter} from \"./MssqlParameter\";\nimport {ColumnSchema} from \"../../schema-builder/schema/ColumnSchema\";\nimport {RandomGenerator} from \"../../util/RandomGenerator\";\n\n/**\n * Organizes communication with SQL Server DBMS.\n */\nexport class SqlServerDriver implements Driver {\n\n    // -------------------------------------------------------------------------\n    // Public Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Connection used by driver.\n     */\n    connection: Connection;\n\n    /**\n     * Connection options.\n     */\n    options: SqlServerConnectionOptions;\n\n    /**\n     * SQL Server library.\n     */\n    mssql: any;\n\n    /**\n     * SQL Server pool.\n     */\n    connectionPool: any;\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Properties\n    // -------------------------------------------------------------------------\n\n    /**\n     * Indicates if tree tables are supported by this driver.\n     */\n    treeSupport = true;\n\n    /**\n     * Gets list of supported column data types by a driver.\n     *\n     * @see https://docs.microsoft.com/en-us/sql/t-sql/data-types/data-types-transact-sql\n     */\n    supportedDataTypes: ColumnType[] = [\n        \"bigint\",\n        \"bit\",\n        \"decimal\",\n        \"int\",\n        \"money\",\n        \"numeric\",\n        \"smallint\",\n        \"smallmoney\",\n        \"tinyint\",\n        \"float\",\n        \"real\",\n        \"date\",\n        \"datetime2\",\n        \"datetime\",\n        \"datetimeoffset\",\n        \"smalldatetime\",\n        \"time\",\n        \"char\",\n        \"text\",\n        \"varchar\",\n        \"nchar\",\n        \"ntext\",\n        \"nvarchar\",\n        \"binary\",\n        \"image\",\n        \"varbinary\",\n        \"cursor\",\n        \"hierarchyid\",\n        \"sql_variant\",\n        \"table\",\n        \"timestamp\",\n        \"uniqueidentifier\",\n        \"xml\"\n    ];\n\n    /**\n     * Orm has special columns and we need to know what database column types should be for those types.\n     * Column types are driver dependant.\n     */\n    mappedDataTypes: MappedColumnTypes = {\n        createDate: \"datetime2\",\n        createDateDefault: \"getdate()\",\n        updateDate: \"datetime2\",\n        updateDateDefault: \"getdate()\",\n        version: \"int\",\n        treeLevel: \"int\",\n        migrationName: \"varchar\",\n        migrationTimestamp: \"bigint\",\n    };\n\n    /**\n     * Default values of length, precision and scale depends on column data type.\n     * Used in the cases when length/precision/scale is not specified by user.\n     */\n    dataTypeDefaults: DataTypeDefaults = {\n        varchar: { length: 255 },\n        nvarchar: { length: 255 }\n    };\n\n    // -------------------------------------------------------------------------\n    // Constructor\n    // -------------------------------------------------------------------------\n\n    constructor(connection: Connection) {\n        this.connection = connection;\n        this.options = connection.options as SqlServerConnectionOptions;\n        Object.assign(connection.options, DriverUtils.buildDriverOptions(connection.options)); // todo: do it better way\n\n        // validate options to make sure everything is set\n        if (!this.options.host)\n            throw new DriverOptionNotSetError(\"host\");\n        if (!this.options.username)\n            throw new DriverOptionNotSetError(\"username\");\n        if (!this.options.database)\n            throw new DriverOptionNotSetError(\"database\");\n\n        // load mssql package\n        this.loadDependencies();\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Implemented Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Performs connection to the database.\n     * Based on pooling options, it can either create connection immediately,\n     * either create a pool and create connection when needed.\n     */\n    connect(): Promise<void> {\n\n        // build connection options for the driver\n        const options = Object.assign({}, {\n            server: this.options.host,\n            user: this.options.username,\n            password: this.options.password,\n            database: this.options.database,\n            port: this.options.port\n        }, this.options.extra || {});\n\n        // set default useUTC option if it hasn't been set\n        if (!options.options) options.options = { useUTC: false };\n        else if (!options.options.useUTC) options.options.useUTC = false;\n\n        // pooling is enabled either when its set explicitly to true,\n        // either when its not defined at all (e.g. enabled by default)\n        return new Promise<void>((ok, fail) => {\n            const connection = new this.mssql.ConnectionPool(options).connect((err: any) => {\n                if (err) return fail(err);\n                this.connectionPool = connection;\n                ok();\n            });\n        });\n    }\n\n    afterConnect(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    /**\n     * Closes connection with the database.\n     */\n    async disconnect(): Promise<void> {\n        if (!this.connectionPool)\n            return Promise.reject(new ConnectionIsNotSetError(\"mssql\"));\n\n        this.connectionPool.close();\n        this.connectionPool = undefined;\n    }\n\n    /**\n     * Creates a schema builder used to build and sync a schema.\n     */\n    createSchemaBuilder() {\n        return new RdbmsSchemaBuilder(this.connection);\n    }\n\n    /**\n     * Creates a query runner used to execute database queries.\n     */\n    createQueryRunner() {\n        return new SqlServerQueryRunner(this);\n    }\n\n    /**\n     * Replaces parameters in the given sql with special escaping character\n     * and an array of parameter names to be passed to a query.\n     */\n    escapeQueryWithParameters(sql: string, parameters: ObjectLiteral): [string, any[]] {\n        if (!parameters || !Object.keys(parameters).length)\n            return [sql, []];\n        const escapedParameters: any[] = [];\n        const keys = Object.keys(parameters).map(parameter => \"(:\" + parameter + \"\\\\b)\").join(\"|\");\n        sql = sql.replace(new RegExp(keys, \"g\"), (key: string) => {\n            const value = parameters[key.substr(1)];\n            if (value instanceof Array) {\n                return value.map((v: any) => {\n                    escapedParameters.push(v);\n                    return \"@\" + (escapedParameters.length - 1);\n                }).join(\", \");\n            } else if (value instanceof Function) {\n                return value();\n\n            } else {\n                escapedParameters.push(value);\n                return \"@\" + (escapedParameters.length - 1);\n            }\n        }); // todo: make replace only in value statements, otherwise problems\n        return [sql, escapedParameters];\n    }\n\n    /**\n     * Escapes a column name.\n     */\n    escape(columnName: string): string {\n        return `\"${columnName}\"`;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type and metadata.\n     */\n    preparePersistentValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return value;\n\n        if (columnMetadata.type === Boolean) {\n            return value === true ? 1 : 0;\n\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDate(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedTimeToDate(value);\n\n        } else if (columnMetadata.type === \"datetime\"\n            || columnMetadata.type === \"datetime2\"\n            || columnMetadata.type === \"smalldatetime\"\n            || columnMetadata.type === \"datetimeoffset\") {\n            return DateUtils.mixedDateToDate(value, true);\n\n        } else if (columnMetadata.isGenerated && columnMetadata.generationStrategy === \"uuid\" && !value) {\n            return RandomGenerator.uuid4();\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.simpleArrayToString(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Prepares given value to a value to be persisted, based on its column type or metadata.\n     */\n    prepareHydratedValue(value: any, columnMetadata: ColumnMetadata): any {\n        if (value === null || value === undefined)\n            return value;\n\n        if (columnMetadata.type === Boolean) {\n            return value ? true : false;\n\n        } else if (columnMetadata.type === \"datetime\"\n            || columnMetadata.type === \"datetime2\"\n            || columnMetadata.type === \"smalldatetime\"\n            || columnMetadata.type === \"datetimeoffset\") {\n            return DateUtils.normalizeHydratedDate(value);\n\n        } else if (columnMetadata.type === \"date\") {\n            return DateUtils.mixedDateToDateString(value);\n\n        } else if (columnMetadata.type === \"time\") {\n            return DateUtils.mixedTimeToString(value);\n\n        } else if (columnMetadata.type === \"simple-array\") {\n            return DateUtils.stringToSimpleArray(value);\n        }\n\n        return value;\n    }\n\n    /**\n     * Creates a database type from a given column metadata.\n     */\n    normalizeType(column: { type?: ColumnType, length?: number, precision?: number, scale?: number }): string {\n        if (column.type === Number) {\n            return \"int\";\n\n        } else if (column.type === String) {\n            return \"nvarchar\";\n\n        } else if (column.type === Date) {\n            return \"datetime\";\n\n        } else if (column.type === Boolean) {\n            return \"bit\";\n\n        } else if ((column.type as any) === Buffer) {\n            return \"binary\";\n\n        } else if (column.type === \"uuid\") {\n            return \"nvarchar\";\n\n        } else if (column.type === \"simple-array\") {\n            return \"ntext\";\n\n        } else if (column.type === \"integer\") {\n            return \"int\";\n\n        } else if (column.type === \"dec\") {\n            return \"decimal\";\n\n        } else if (column.type === \"float\" && (column.precision && (column.precision! >= 1 && column.precision! < 25))) {\n            return \"real\";\n\n        } else if (column.type === \"double precision\") {\n            return \"float\";\n\n        } else {\n            return column.type as string || \"\";\n        }\n\n    }\n\n    /**\n     * Normalizes \"default\" value of the column.\n     */\n    normalizeDefault(column: ColumnMetadata): string {\n        if (typeof column.default === \"number\") {\n            return \"\" + column.default;\n\n        } else if (typeof column.default === \"boolean\") {\n            return column.default === true ? \"1\" : \"0\";\n\n        } else if (typeof column.default === \"function\") {\n            return \"(\" + column.default() + \")\";\n\n        } else if (typeof column.default === \"string\") {\n            return `'${column.default}'`;\n\n        } else {\n            return column.default;\n        }\n    }\n\n    createFullType(column: ColumnSchema): string {\n        let type = column.type;\n\n        if (column.length) {\n            type += \"(\" + column.length + \")\";\n        } else if (column.precision && column.scale) {\n            type += \"(\" + column.precision + \",\" + column.scale + \")\";\n        } else if (column.precision && column.type !== \"real\") {\n            type +=  \"(\" + column.precision + \")\";\n        } else if (column.scale) {\n            type +=  \"(\" + column.scale + \")\";\n        } else  if (this.dataTypeDefaults && this.dataTypeDefaults[column.type] && this.dataTypeDefaults[column.type].length) {\n            type +=  \"(\" + this.dataTypeDefaults[column.type].length + \")\";\n        }\n\n        if (column.isArray)\n            type += \" array\";\n\n        return type;\n    }\n\n    // -------------------------------------------------------------------------\n    // Public Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * Sql server's parameters needs to be wrapped into special object with type information about this value.\n     * This method wraps given value into MssqlParameter based on its column definition.\n     */\n    parametrizeValue(column: ColumnMetadata, value: any) {\n\n        // if its already MssqlParameter then simply return it\n        if (value instanceof MssqlParameter)\n            return value;\n\n        const normalizedType = this.normalizeType({ type: column.type });\n        if (column.length) {\n            return new MssqlParameter(value, normalizedType as any, column.length as any);\n\n        } else if (column.precision && column.scale) {\n            return new MssqlParameter(value, normalizedType as any, column.precision, column.scale);\n\n        } else if (column.precision) {\n            return new MssqlParameter(value, normalizedType as any, column.precision);\n\n        } else if (column.scale) {\n            return new MssqlParameter(value, normalizedType as any, column.scale);\n        }\n\n        return new MssqlParameter(value, column.type as any);\n    }\n\n    /**\n     * Sql server's parameters needs to be wrapped into special object with type information about this value.\n     * This method wraps all values of the given object into MssqlParameter based on their column definitions in the given table.\n     */\n    parametrizeMap(tableName: string, map: ObjectLiteral): ObjectLiteral {\n\n        // find metadata for the given table\n        if (!this.connection.hasMetadata(tableName)) // if no metadata found then we can't proceed because we don't have columns and their types\n            return map;\n        const metadata = this.connection.getMetadata(tableName);\n\n        return Object.keys(map).reduce((newMap, key) => {\n            const value = map[key];\n\n            // find column metadata\n            const column = metadata.findColumnWithDatabaseName(key);\n            if (!column) // if we didn't find a column then we can't proceed because we don't have a column type\n                return value;\n\n            newMap[key] = this.parametrizeValue(column, value);\n            return newMap;\n        }, {} as ObjectLiteral);\n    }\n\n    // -------------------------------------------------------------------------\n    // Protected Methods\n    // -------------------------------------------------------------------------\n\n    /**\n     * If driver dependency is not given explicitly, then try to load it via \"require\".\n     */\n    protected loadDependencies(): void {\n        try {\n            this.mssql = PlatformTools.load(\"mssql\");\n\n        } catch (e) { // todo: better error for browser env\n            throw new DriverPackageNotInstalledError(\"SQL Server\", \"mssql\");\n        }\n    }\n\n}\n"],"sourceRoot":"../.."}